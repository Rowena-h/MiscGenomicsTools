#!/bin/bash
#Script to pull a gene from a genome (requires blast)

display_usage() {
	echo ""
	echo "USAGE: $0 [OPTIONS]"
    echo ""
	echo "OPTIONS"
    echo "  -h, --help"
    echo "      display these options"
	echo "  -a, --assembly"
    echo "      genome assembly in fasta format"
	echo "  -g, --gene"
    echo "      gene of closely related species in fasta format"
    echo "  -o, --output"
    echo "      prefix for output file"
    echo ""
    echo "EXAMPLE"
	echo "  $0 -a assembly.fa -g ITS.fa -o ITS_result"
    echo ""
    exit
}

if [ -z "$1" ]
then
    display_usage
    exit
fi

while [ "$#" -gt 0 ]
do
    ARGUMENTS="$1"
    case $ARGUMENTS in
        -h|--help)
        display_usage
        ;;
        -a|--assembly)
        ASSEMBLY="$2"
        shift
        ;;
        -g|--gene)
        GENE="$2"
        shift
        ;;
        -o|--output)
        OUT="$2"
        shift
    esac
    shift
done

if ! command -v blastn &> /dev/null
then
    echo "Could not find blastn - please install first."
    exit
fi

if ! command -v bedtools &> /dev/null
then
    echo "Could not find bedtools - please install first."
    exit
fi

if [ -z "$ASSEMBLY" ] || [ -z "$GENE" ] || [ -o "$OUT" ]
then
    echo "Missing required options"
    display_usage
    echo "Exiting..."
    exit
fi

#Make blast database from contigs
makeblastdb -in $ASSEMBLY -dbtype nucl

#Blast genes against contigs
blastn 	-query $GENE -db $ASSEMBLY \
	-outfmt '6 qseqid sseqid evalue bitscore pident sstart send length' \
	-out ${ASSEMBLY}_${GENE}_blast

NUM=$(wc -l <${ASSEMBLY}_${GENE}_blast)

if [[ $NUM -gt 1 ]]
then

    echo " "
	echo "--------------------BLAST RESULTS--------------------"
	#Show blast results
	echo "hit	query	contig_hit	evalue	bitscore	pident	start	end	length"
	cat -n ${ASSEMBLY}_${GENE}_blast
	echo "--------------------BLAST RESULTS--------------------"
    echo " "
    #Ask for hit to pull
	echo "Please specify the number of the hit you would like to pull (type a to pull all): "
	read RESULT

	if [[ $RESULT == "a" ]]
	then

		#Convert all hits to BED file
		awk -v OFS='\t' '{print $2, $6, $7}' ${ASSEMBLY}_${GENE}_blast > tmp.bed

		for i in $(seq 1 $NUM)
		do
			#Check orientation
			START=$(sed -n ${i}p tmp.bed | awk '{print $2}')
			END=$(sed -n ${i}p tmp.bed | awk '{print $3}')
	        if [[ $START -gt $END ]]
        	then
                echo "Sequence ${i} is in the opposite orientation to the query and may need to be reverse complemented"
	            sed -n ${i}p tmp.bed | awk -v OFS='\t' '{print $1, $3, $2, $4}' >> tmp
            else
                sed -n ${i}p tmp.bed >> tmp
        	fi
		done
		
		mv tmp tmp.bed

	else

		#Convert selected hit to BED file
		sed -n ${RESULT}p ${ASSEMBLY}_${GENE}_blast | awk -v OFS='\t' '{print $2, $6, $7}' > tmp.bed

		#Check orientation
		START=$(awk '{print $2}' tmp.bed)
        END=$(awk '{print $3}' tmp.bed)
        if [[ $START -gt $END ]]
	    then
            echo "Sequence is in the opposite orientation to the query and may need to be reverse complemented"
           	awk -v OFS='\t' '{print $1, $3, $2, $4}' tmp.bed > tmp && mv tmp tmp.bed
        fi
        
	fi

else

	#Convert single hit to BED file
    awk -v OFS='\t' '{print $2, $6, $7}' ${ASSEMBLY}_${GENE}_blast > tmp.bed

	#Check orientation
	START=$(awk '{print $2}' tmp.bed)
    END=$(awk '{print $3}' tmp.bed)
    if [[ $START -gt $END ]]
	then
		echo "Sequence is in the opposite orientation to the query and may need to be reverse complemented"
		awk -v OFS='\t' '{print $1, $3, $2, $4}' tmp.bed > tmp && mv tmp tmp.bed
	fi

fi

#Pull hit(s)
bedtools getfasta -fi ${ASSEMBLY} -bed tmp.bed > ${OUT}.fa

#Remove intermediary files
rm tmp.bed

echo "Done, hit(s) saved in ${OUT}.fa"
